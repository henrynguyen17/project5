org: henrynguyen17
app: serverless-diary-app
service: serverless-diary-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

package:
  individually: false

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    DIARIES_TABLE: Diaries-${self:provider.stage}
    DIARIES_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: hoangnx11-c5-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetDiaries:
    handler: src/lambda/http/getDiaries.handler
    events:
      - http:
          method: get
          path: diaries
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARIES_TABLE}

  
  SearchDiaries:
    handler: src/lambda/http/searchDiaries.handler
    events:
      - http:
          method: get
          path: diaries/search/{searchText}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARIES_TABLE}

  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateDiary:
    handler: src/lambda/http/createDiary.handler
    events:
      - http:
          method: post
          path: diaries
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(validation/validate-diary-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARIES_TABLE}

  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateDiary:
    handler: src/lambda/http/updateDiary.handler
    events:
      - http:
          method: patch
          path: diaries/{diaryId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/validation/validate-diary-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARIES_TABLE}

  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteDiary:
    handler: src/lambda/http/deleteDiary.handler
    events:
      - http:
          method: delete
          path: diaries/{diaryId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARIES_TABLE}

  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: diaries/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARIES_TABLE}

resources:
  Resources:
    RestApi:
      Type: "AWS::ApiGateway::RestApi"
      Properties:
        Name: "myRestApi"
    # Add necessary AWS resources. You will need at least the following AWS resources
    # Feel free to change the names as you like. 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
           gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
           gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'RestApi'
    
    DiariesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: diaryId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: diaryId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DIARIES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DIARIES_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - '*'
              ExposedHeaders:
                - Date
              Id: myCORSRuleId1
              MaxAge: 3600
            - AllowedHeaders:
                - x-amz-*
              AllowedMethods:
                - PUT
                - DELETE
              AllowedOrigins:
                - 'http://localhost:3000/*'
              ExposedHeaders:
                - Connection
                - Server
                - Date
              Id: myCORSRuleId2
              MaxAge: 1800

    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AttachmentsBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - 's3:GetObject'
                - 's3:PutObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref AttachmentsBucket
                  - /*
              Principal: '*'
              Condition:
                StringLike:
                  'aws:Referer':
                    - 'http://localhost:3000/*'
  Outputs:
    BucketName:
      Value: !Ref AttachmentsBucket
      Description: Name of the sample Amazon S3 bucket with CORS enabled.